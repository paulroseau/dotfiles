NIX_HOME="$HOME/.nix-profile"

if [ -e $NIX_HOME/etc/profile.d/nix.sh ]; then . $NIX_HOME/etc/profile.d/nix.sh; fi # added by Nix installer

# Environment variables
export EDITOR="nvim"
export VISUAL="nvim"
# Necessary for packages complaining about Locale in nix cf. https://github.com/NixOS/nix/issues/4829 
# For instance it causes issues with nix installed starship which leaves characters when using Tab completion in zsh
# cf. https://stackoverflow.com/questions/19305291/remnant-characters-when-tab-completing-with-zsh
export LC_ALL="C.UTF-8"

# Prompt
eval "$(starship init zsh)"

# History
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=${ZDOTDIR:-$HOME}/.zsh_history
setopt HIST_SAVE_NO_DUPS # not so useful since SHARE_HISTORY adds timestamps to each line
setopt SHARE_HISTORY
setopt APPEND_HISTORY

# Aliases
alias diff='diff --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias ls='ls --color=auto'
alias l='ls -CFt'
alias la='ls -At'
alias ll='ls -alFt'

if [ $(command -v bat) ]; then alias cat='bat'; fi
if [ $(command -v rg) ]; then alias grep='rg'; fi

# Default keymap

# Zsh sets keymap to viins if the EDITOR environment variable is set to nvim.
# Because the emulation is not exact, it is better to use default emacs bindings
# and resort to full on nvim if advanced editing is needed (cf. edit-command-line)
bindkey -A emacs main 

# Edit current command in editor
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M main '^v' edit-command-line

# Completion

# Init completion
autoload -Uz compinit
compinit

# Configure completion
zstyle ':completion:*' menu select

# Naviagte the completion menu with vi style bindings
zmodload zsh/complist
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'j' vi-down-line-or-history

# Add zsh completion for nix installed tools
if [ -e $NIX_HOME/share/zsh/site-functions ]
then 
  fpath+=($NIX_HOME/share/zsh/site-functions $fpath)
fi

# FZF
if [ -f $NIX_HOME/share/fzf/completion.zsh ]; then source $NIX_HOME/share/fzf/completion.zsh; fi
if [ -f $NIX_HOME/share/fzf/key-bindings.zsh ]; then source $NIX_HOME/share/fzf/key-bindings.zsh; fi

# Zsh-z
if [ -f $NIX_HOME/share/zsh-z/zsh-z.plugin.zsh ]; then source $NIX_HOME/share/zsh-z/zsh-z.plugin.zsh; fi

# Zsh-autosuggestions
if [ -f $NIX_HOME/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then source $NIX_HOME/share/zsh-autosuggestions/zsh-autosuggestions.zsh; fi

# Syntax highlighting
if [ -f $NIX_HOME/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]
then
  source $NIX_HOME/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# kubectl
if [ -f $NIX_HOME/share/zsh/site-functions/_kubectl ]; then source $NIX_HOME/share/zsh/site-functions/_kubectl; fi

# Better manpager for man pages

# NB: We want to use nvim to display man pages but we don't want to nest nvim
# instances when launching man from a terminal running inside nvim (:terminal).
# I tried to create a script with the following but I can get it to work:
# nvim --server $NVIM --remote-send '<C-\><C-n><C-w>c:Man! '"$1"'<CR>' 
#
# On top of it, the behaviour with toggleterm is not super neat because unpon
# returning to the window:
# 1. the cursor is at the top of the window
# 2. we need to get back in insert mode.
#
# Also if you launch :terminal and your shell environment is not zsh, you would
# get an inconsistent behaviour Hence we play it simple: use nvim as a manpager
# outside of nvim only, fallback on bat if it is available or the default
if [ -z $NVIM ]
then 
  # running outside nvim
  if [ $(command -v nvim) ]; then export MANPAGER='nvim -c "Man!"'; fi
else
  # running inside nvim (:terminal)
  unset MANPAGER # the MANPAGER value is inherited from the parent process, so we need to reset it

  # let's use bat if we have it
  if [ $(command -v bat) ]; then export MANPAGER='bat'; fi
fi
